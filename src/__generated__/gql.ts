/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  query GetUsersOrderByRewardPointDesc($skip: Int = 0, $limit: Int = 25) {\n    usersOrderByRewardPointDesc(skip: $skip, limit: $limit) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.GetUsersOrderByRewardPointDescDocument,
    "\n  query FindRankByUserId($userId: String!) {\n    findRankByUserId(userId: $userId)\n  }\n": types.FindRankByUserIdDocument,
    "\n  query GetUserByKakaoId($kakaoId: Float!) {\n    userByKakaoId(kakaoId: $kakaoId) {\n      _id\n      email\n      gmail\n      name\n      participatingTickets {\n        _id\n        imageUrl\n        description\n        project {\n          _id\n          categories\n          description\n          imageUrl\n          name\n        }\n        rewardPolicy {\n          context\n          rewardPoint\n          rewardPolicyType\n        }\n        title\n        winners {\n          _id\n          name\n        }\n        quests {\n          _id\n        }\n      }\n      profileImageUrl\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      wallets {\n        address\n        chain\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.GetUserByKakaoIdDocument,
    "\n  query GetUserByName($name: String!) {\n    userByName(name: $name) {\n      _id\n      email\n      gmail\n      name\n      participatingTickets {\n        _id\n        imageUrl\n        description\n        project {\n          _id\n          categories\n          description\n          imageUrl\n          name\n        }\n        rewardPolicy {\n          context\n          rewardPoint\n          rewardPolicyType\n        }\n        title\n        winners {\n          _id\n          name\n        }\n        quests {\n          _id\n        }\n      }\n      profileImageUrl\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      wallets {\n        address\n        chain\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.GetUserByNameDocument,
    "\n  query GetUserByEmail($email: String!) {\n    userByEmail(email: $email) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.GetUserByEmailDocument,
    "\n  query userByGmail($gmail: String!) {\n    userByGmail(gmail: $gmail) {\n      _id\n      name\n      profileImageUrl\n      gmail\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.UserByGmailDocument,
    "\n  query GetUserByWalletAddress($walletAddress: String!) {\n    userByWalletAddress(walletAddress: $walletAddress) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.GetUserByWalletAddressDocument,
    "\n  query validateAuthCode($email: String!, $code: String!) {\n    validateAuthCode(email: $email, code: $code)\n  }\n": types.ValidateAuthCodeDocument,
    "\n  mutation sendAuthCode($email: String!) {\n    sendAuthCode(to: $email)\n  }\n": types.SendAuthCodeDocument,
    "\n  mutation CreateUserByEmail($email: String!) {\n    createUserByEmail(email: $email) {\n      name\n    }\n  }\n": types.CreateUserByEmailDocument,
    "\n  mutation CreateUserByGmail($gmail: String!, $profileImageUrl: String!) {\n    createUserByGmail(gmail: $gmail, profileImageUrl: $profileImageUrl) {\n      name\n    }\n  }\n": types.CreateUserByGmailDocument,
    "\n  mutation CreateUserByWallet($address: String!, $chain: ChainType!) {\n    createUserByWallet(address: $address, chain: $chain) {\n      name\n    }\n  }\n": types.CreateUserByWalletDocument,
    "\n  mutation CreateUserByKakao($kakaoInfo: KakaoInputType!) {\n    createUserByKakao(kakaoInfo: $kakaoInfo) {\n      name\n    }\n  }\n": types.CreateUserByKakaoDocument,
    "\n  mutation UpdateUserWalletByName(\n    $name: String!\n    $wallets: [UserWalletInputType!]\n  ) {\n    updateUserByName(name: $name, userUpdateInput: { wallets: $wallets }) {\n      wallets {\n        address\n        chain\n      }\n    }\n  }\n": types.UpdateUserWalletByNameDocument,
    "\n  mutation UpdateUserProfileImageByName(\n    $name: String!\n    $profileImageUrl: String!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { profileImageUrl: $profileImageUrl }\n    ) {\n      profileImageUrl\n    }\n  }\n": types.UpdateUserProfileImageByNameDocument,
    "\n  mutation UpdateUserAppAgreementByName(\n    $name: String!\n    $appAgreement: AppAgreementInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { appAgreement: $appAgreement }\n    ) {\n      appAgreement {\n        marketingPermission\n      }\n    }\n  }\n": types.UpdateUserAppAgreementByNameDocument,
    "\n  mutation UpdateUserEmailByName($name: String!, $email: String!) {\n    updateUserByName(name: $name, userUpdateInput: { email: $email }) {\n      email\n    }\n  }\n": types.UpdateUserEmailByNameDocument,
    "\n  mutation UpdateUserRewardByName($name: String!, $rewardPoint: Float!) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { rewardPoint: $rewardPoint }\n    ) {\n      rewardPoint\n    }\n  }\n": types.UpdateUserRewardByNameDocument,
    "\n  mutation UpdateUserSocialByName(\n    $name: String!\n    $userSocial: UserSocialInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: $userSocial }\n    ) {\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n    }\n  }\n": types.UpdateUserSocialByNameDocument,
    "\n  mutation UpdateUserDiscordByName($name: String!, $discord: DiscordInputType) {\n    updateUserByName(name: $name, userUpdateInput: { discord: $discord }) {\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n": types.UpdateUserDiscordByNameDocument,
    "\n  mutation UpdateUserTwitterByName($name: String!, $twitterId: String!) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: { twitterId: $twitterId } }\n    ) {\n      userSocial {\n        twitterId\n      }\n    }\n  }\n": types.UpdateUserTwitterByNameDocument,
    "\n  mutation UpdateUserTelegramByName(\n    $name: String!\n    $telegramUser: TelegramUserInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: { telegramUser: $telegramUser } }\n    ) {\n      userSocial {\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n    }\n  }\n": types.UpdateUserTelegramByNameDocument,
    "\n  mutation UpdateKakaoByName($name: String!, $kakaoInfo: KakaoInputType!) {\n    updateKakaoByName(name: $name, kakaoInfo: $kakaoInfo) {\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n        kakao_account {\n          age_range\n          age_range_needs_agreement\n          birthday\n          birthday_needs_agreement\n          birthday_type\n          gender\n          gender_needs_agreement\n          has_age_range\n          has_birthday\n          has_gender\n          profile_image_needs_agreement\n          profile_nickname_needs_agreement\n        }\n      }\n    }\n  }\n  #  mutation UpdateKakaoByName(\n  #    $name: String!\n  #    $authCode: String!\n  #    $redirectUri: String!\n  #  ) {\n  #    updateKakaoByName(\n  #      authCode: $authCode\n  #      name: $name\n  #      redirectUri: $redirectUri\n  #    ) {\n  #      kakao {\n  #        id\n  #        connected_at\n  #        properties {\n  #          nickname\n  #          profile_image\n  #          thumbnail_image\n  #        }\n  #      }\n  #    }\n  #  }\n": types.UpdateKakaoByNameDocument,
    "\n  mutation DeleteKakaoByName($name: String!) {\n    deleteKakaoByName(name: $name) {\n      _id\n    }\n  }\n": types.DeleteKakaoByNameDocument,
    "\n  mutation DeleteDiscordByName($name: String!) {\n    deleteDiscordByName(name: $name) {\n      _id\n    }\n  }\n": types.DeleteDiscordByNameDocument,
    "\n  query Tickets(\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n  ) {\n    tickets(\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n    ) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n": types.TicketsDocument,
    "\n  query GetTicketById($id: String!) {\n    ticketById(ticketId: $id) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      participantCount\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n        questGuides {\n          contentFormatType\n          content\n          contentEncodingType\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      rewardClaimedUsers {\n        _id\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      visible\n    }\n  }\n": types.GetTicketByIdDocument,
    "\n  query Projects($eventTypes: [EventType!]) {\n    projects(eventTypes: $eventTypes) {\n      _id\n      categories\n      description\n      imageUrl\n      name\n      priority\n      projectSocial {\n        discordUrl\n        officialUrl\n        telegramUrl\n        twitterUrl\n        mediumUrl\n        naverBlogUrl\n        kakaoUrl\n      }\n    }\n  }\n": types.ProjectsDocument,
    "\n  query ProjectById($projectId: String!) {\n    projectById(projectId: $projectId) {\n      _id\n      categories\n      description\n      imageUrl\n      name\n      priority\n      projectSocial {\n        discordUrl\n        officialUrl\n        telegramUrl\n        twitterUrl\n        mediumUrl\n        naverBlogUrl\n        kakaoUrl\n      }\n    }\n  }\n": types.ProjectByIdDocument,
    "\n  query TicketsByProjectId(\n    $projectId: String!\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n  ) {\n    ticketsByProjectId(\n      projectId: $projectId\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n    ) {\n      _id\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      participants {\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n": types.TicketsByProjectIdDocument,
    "\n  mutation VerifyTwitterLinkingAndRetweetQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterLinkingAndRetweetQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyTwitterLinkingAndRetweetQuestDocument,
    "\n  mutation VerifyTwitterLikingQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterLikingQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyTwitterLikingQuestDocument,
    "\n  mutation VerifyTwitterFollowQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterFollowQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyTwitterFollowQuestDocument,
    "\n  mutation VerifyTwitterRetweetQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterRetweetQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyTwitterRetweetQuestDocument,
    "\n  mutation Verify3ridgePoint(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verify3ridgePoint(questId: $questId, ticketId: $ticketId, userId: $userId) {\n      _id\n    }\n  }\n": types.Verify3ridgePointDocument,
    "\n  mutation VerifyDiscordQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyDiscordQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyDiscordQuestDocument,
    "\n  query IsCompletedQuestByUserId($questId: String!, $userId: String!) {\n    isCompletedQuestByUserId(questId: $questId, userId: $userId) {\n      isCompleted\n      questId\n    }\n  }\n": types.IsCompletedQuestByUserIdDocument,
    "\n  mutation CompleteQuestOfUser(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    completeQuestOfUser(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n      title\n      title_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      description\n      questPolicy {\n        context\n        questPolicy\n      }\n    }\n  }\n": types.CompleteQuestOfUserDocument,
    "\n  mutation ClaimReward($ticketId: String!, $userId: String!) {\n    claimReward(ticketId: $ticketId, userId: $userId)\n  }\n": types.ClaimRewardDocument,
    "\n  mutation VerifyAptosQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyAptosQuest(questId: $questId, ticketId: $ticketId, userId: $userId) {\n      _id\n    }\n  }\n": types.VerifyAptosQuestDocument,
    "\n  query IsRegisteredWallet($address: String!, $chain: ChainType!) {\n    isRegisteredWallet(address: $address, chain: $chain)\n  }\n": types.IsRegisteredWalletDocument,
    "\n  mutation ClearParticipatedAllEventsByUserId($userId: String!) {\n    clearParticipatedAllEventsByUserId(userId: $userId)\n  }\n": types.ClearParticipatedAllEventsByUserIdDocument,
    "\n  mutation UpdateTicketVisible($ticketId: String!, $visible: Boolean) {\n    updateTicketById(ticketId: $ticketId, visible: $visible) {\n      _id\n    }\n  }\n": types.UpdateTicketVisibleDocument,
    "\n  mutation UpdateTicketShortDescription(\n    $ticketId: String!\n    $shortDescription: String\n  ) {\n    updateTicketById(ticketId: $ticketId, shortDescription: $shortDescription) {\n      _id\n    }\n  }\n": types.UpdateTicketShortDescriptionDocument,
    "\n  mutation UpdateTicketImageUrl($ticketId: String!, $imageUrl: String) {\n    updateTicketById(ticketId: $ticketId, imageUrl: $imageUrl) {\n      _id\n    }\n  }\n": types.UpdateTicketImageUrlDocument,
    "\n  mutation UpdateTicketTitle($ticketId: String!, $title: String) {\n    updateTicketById(ticketId: $ticketId, title: $title) {\n      _id\n    }\n  }\n": types.UpdateTicketTitleDocument,
    "\n  mutation UpdateTicketProject($ticketId: String!, $project: String) {\n    updateTicketById(ticketId: $ticketId, project: $project) {\n      _id\n    }\n  }\n": types.UpdateTicketProjectDocument,
    "\n  mutation UpdateTicketDateRangeTime(\n    $ticketId: String!\n    $beginTime: DateTime\n    $untilTime: DateTime\n  ) {\n    updateTicketById(\n      ticketId: $ticketId\n      beginTime: $beginTime\n      untilTime: $untilTime\n    ) {\n      _id\n    }\n  }\n": types.UpdateTicketDateRangeTimeDocument,
    "\n  mutation UpdateTicketDescription(\n    $ticketId: String!\n    $description_v2: ContentMetadataInputType\n  ) {\n    updateTicketById(ticketId: $ticketId, description_v2: $description_v2) {\n      _id\n    }\n  }\n": types.UpdateTicketDescriptionDocument,
    "\n  mutation UpdateTicketRewardPolicy(\n    $ticketId: String!\n    $rewardPolicy: RewardPolicyInputType\n  ) {\n    updateTicketById(ticketId: $ticketId, rewardPolicy: $rewardPolicy) {\n      _id\n    }\n  }\n": types.UpdateTicketRewardPolicyDocument,
    "\n  mutation CreateQuest(\n    $ticketId: String!\n    $title_v2: ContentMetadataInputType\n    $description: String\n    $questPolicy: QuestPolicyInputType\n  ) {\n    createQuest(\n      ticketId: $ticketId\n      title_v2: $title_v2\n      description: $description\n      questPolicy: $questPolicy\n    ) {\n      _id\n    }\n  }\n": types.CreateQuestDocument,
    "\n  mutation DeleteQuest($questId: String!, $ticketId: String!) {\n    deleteQuest(questId: $questId, ticketId: $ticketId)\n  }\n": types.DeleteQuestDocument,
    "\n  mutation UpdateQuest(\n    $description: String!\n    $id: String!\n    $questPolicy: QuestPolicyInputType\n    $title_v2: ContentMetadataInputType\n  ) {\n    updateQuest(\n      description: $description\n      id: $id\n      questPolicy: $questPolicy\n      title_v2: $title_v2\n    ) {\n      _id\n    }\n  }\n": types.UpdateQuestDocument,
    "\n  mutation CreateTicket(\n    $beginTime: DateTime\n    $untilTime: DateTime\n    $title: String\n    $description_v2: ContentMetadataInputType\n    $imageUrl: String\n    $rewardPolicy: RewardPolicyInputType\n  ) {\n    createTicket(\n      beginTime: $beginTime\n      description_v2: $description_v2\n      imageUrl: $imageUrl\n      rewardPolicy: $rewardPolicy\n      title: $title\n      untilTime: $untilTime\n    ) {\n      _id\n    }\n  }\n": types.CreateTicketDocument,
    "\n  mutation DeleteTicket($ticketId: String!) {\n    removeTicketById(ticketId: $ticketId)\n  }\n": types.DeleteTicketDocument,
    "\n  mutation VerifySurveyQuest(\n    $questId: String!\n    $surveyContents: [String!]!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifySurveyQuest(\n      questId: $questId\n      surveyContents: $surveyContents\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifySurveyQuestDocument,
    "\n  mutation VerifyScreenShotQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n    $picUris: [String!]!\n  ) {\n    verifyScreenShotQuest(\n      questId: $questId\n      picUris: $picUris\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyScreenShotQuestDocument,
    "\n  mutation RemoveProject($projectId: String!) {\n    removeProject(projectId: $projectId) {\n      _id\n    }\n  }\n": types.RemoveProjectDocument,
    "\n  mutation CreateProject(\n    $name: String!\n    $categories: [CategoryType!]\n    $priority: Float\n    $description: String\n    $imageUrl: String\n    $projectSocial: ProjectSocialInputType\n  ) {\n    createProject(\n      name: $name\n      categories: $categories\n      priority: $priority\n      description: $description\n      imageUrl: $imageUrl\n      projectSocial: $projectSocial\n    ) {\n      _id\n    }\n  }\n": types.CreateProjectDocument,
    "\n  mutation UpdateProject(\n    $projectId: String!\n    $description: String\n    $imageUrl: String\n    $name: String\n    $priority: Float\n    $projectSocial: ProjectSocialInputType\n  ) {\n    updateProject(\n      projectId: $projectId\n      description: $description\n      imageUrl: $imageUrl\n      name: $name\n      priority: $priority\n      projectSocial: $projectSocial\n    ) {\n      _id\n    }\n  }\n": types.UpdateProjectDocument,
    "\n  mutation reorderProject($projectId: String!, $to: Float!) {\n    reorderProject(projectId: $projectId, to: $to)\n  }\n": types.ReorderProjectDocument,
    "\n  mutation VerifyOnChainQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyOnChainQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyOnChainQuestDocument,
    "\n  mutation VerifyTelegramQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTelegramQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n": types.VerifyTelegramQuestDocument,
    "\n  query AllTickets(\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n    $limit: Int\n    $skip: Int\n  ) {\n    tickets(\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n      limit: $limit\n      skip: $skip\n    ) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n": types.AllTicketsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUsersOrderByRewardPointDesc($skip: Int = 0, $limit: Int = 25) {\n    usersOrderByRewardPointDesc(skip: $skip, limit: $limit) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUsersOrderByRewardPointDesc($skip: Int = 0, $limit: Int = 25) {\n    usersOrderByRewardPointDesc(skip: $skip, limit: $limit) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindRankByUserId($userId: String!) {\n    findRankByUserId(userId: $userId)\n  }\n"): (typeof documents)["\n  query FindRankByUserId($userId: String!) {\n    findRankByUserId(userId: $userId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserByKakaoId($kakaoId: Float!) {\n    userByKakaoId(kakaoId: $kakaoId) {\n      _id\n      email\n      gmail\n      name\n      participatingTickets {\n        _id\n        imageUrl\n        description\n        project {\n          _id\n          categories\n          description\n          imageUrl\n          name\n        }\n        rewardPolicy {\n          context\n          rewardPoint\n          rewardPolicyType\n        }\n        title\n        winners {\n          _id\n          name\n        }\n        quests {\n          _id\n        }\n      }\n      profileImageUrl\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      wallets {\n        address\n        chain\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserByKakaoId($kakaoId: Float!) {\n    userByKakaoId(kakaoId: $kakaoId) {\n      _id\n      email\n      gmail\n      name\n      participatingTickets {\n        _id\n        imageUrl\n        description\n        project {\n          _id\n          categories\n          description\n          imageUrl\n          name\n        }\n        rewardPolicy {\n          context\n          rewardPoint\n          rewardPolicyType\n        }\n        title\n        winners {\n          _id\n          name\n        }\n        quests {\n          _id\n        }\n      }\n      profileImageUrl\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      wallets {\n        address\n        chain\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserByName($name: String!) {\n    userByName(name: $name) {\n      _id\n      email\n      gmail\n      name\n      participatingTickets {\n        _id\n        imageUrl\n        description\n        project {\n          _id\n          categories\n          description\n          imageUrl\n          name\n        }\n        rewardPolicy {\n          context\n          rewardPoint\n          rewardPolicyType\n        }\n        title\n        winners {\n          _id\n          name\n        }\n        quests {\n          _id\n        }\n      }\n      profileImageUrl\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      wallets {\n        address\n        chain\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserByName($name: String!) {\n    userByName(name: $name) {\n      _id\n      email\n      gmail\n      name\n      participatingTickets {\n        _id\n        imageUrl\n        description\n        project {\n          _id\n          categories\n          description\n          imageUrl\n          name\n        }\n        rewardPolicy {\n          context\n          rewardPoint\n          rewardPolicyType\n        }\n        title\n        winners {\n          _id\n          name\n        }\n        quests {\n          _id\n        }\n      }\n      profileImageUrl\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      wallets {\n        address\n        chain\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserByEmail($email: String!) {\n    userByEmail(email: $email) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserByEmail($email: String!) {\n    userByEmail(email: $email) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query userByGmail($gmail: String!) {\n    userByGmail(gmail: $gmail) {\n      _id\n      name\n      profileImageUrl\n      gmail\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query userByGmail($gmail: String!) {\n    userByGmail(gmail: $gmail) {\n      _id\n      name\n      profileImageUrl\n      gmail\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserByWalletAddress($walletAddress: String!) {\n    userByWalletAddress(walletAddress: $walletAddress) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUserByWalletAddress($walletAddress: String!) {\n    userByWalletAddress(walletAddress: $walletAddress) {\n      _id\n      name\n      profileImageUrl\n      email\n      wallets {\n        address\n        chain\n      }\n      rewardPoint\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n      }\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query validateAuthCode($email: String!, $code: String!) {\n    validateAuthCode(email: $email, code: $code)\n  }\n"): (typeof documents)["\n  query validateAuthCode($email: String!, $code: String!) {\n    validateAuthCode(email: $email, code: $code)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation sendAuthCode($email: String!) {\n    sendAuthCode(to: $email)\n  }\n"): (typeof documents)["\n  mutation sendAuthCode($email: String!) {\n    sendAuthCode(to: $email)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateUserByEmail($email: String!) {\n    createUserByEmail(email: $email) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserByEmail($email: String!) {\n    createUserByEmail(email: $email) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateUserByGmail($gmail: String!, $profileImageUrl: String!) {\n    createUserByGmail(gmail: $gmail, profileImageUrl: $profileImageUrl) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserByGmail($gmail: String!, $profileImageUrl: String!) {\n    createUserByGmail(gmail: $gmail, profileImageUrl: $profileImageUrl) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateUserByWallet($address: String!, $chain: ChainType!) {\n    createUserByWallet(address: $address, chain: $chain) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserByWallet($address: String!, $chain: ChainType!) {\n    createUserByWallet(address: $address, chain: $chain) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateUserByKakao($kakaoInfo: KakaoInputType!) {\n    createUserByKakao(kakaoInfo: $kakaoInfo) {\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserByKakao($kakaoInfo: KakaoInputType!) {\n    createUserByKakao(kakaoInfo: $kakaoInfo) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserWalletByName(\n    $name: String!\n    $wallets: [UserWalletInputType!]\n  ) {\n    updateUserByName(name: $name, userUpdateInput: { wallets: $wallets }) {\n      wallets {\n        address\n        chain\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserWalletByName(\n    $name: String!\n    $wallets: [UserWalletInputType!]\n  ) {\n    updateUserByName(name: $name, userUpdateInput: { wallets: $wallets }) {\n      wallets {\n        address\n        chain\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserProfileImageByName(\n    $name: String!\n    $profileImageUrl: String!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { profileImageUrl: $profileImageUrl }\n    ) {\n      profileImageUrl\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserProfileImageByName(\n    $name: String!\n    $profileImageUrl: String!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { profileImageUrl: $profileImageUrl }\n    ) {\n      profileImageUrl\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserAppAgreementByName(\n    $name: String!\n    $appAgreement: AppAgreementInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { appAgreement: $appAgreement }\n    ) {\n      appAgreement {\n        marketingPermission\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserAppAgreementByName(\n    $name: String!\n    $appAgreement: AppAgreementInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { appAgreement: $appAgreement }\n    ) {\n      appAgreement {\n        marketingPermission\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserEmailByName($name: String!, $email: String!) {\n    updateUserByName(name: $name, userUpdateInput: { email: $email }) {\n      email\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserEmailByName($name: String!, $email: String!) {\n    updateUserByName(name: $name, userUpdateInput: { email: $email }) {\n      email\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserRewardByName($name: String!, $rewardPoint: Float!) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { rewardPoint: $rewardPoint }\n    ) {\n      rewardPoint\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserRewardByName($name: String!, $rewardPoint: Float!) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { rewardPoint: $rewardPoint }\n    ) {\n      rewardPoint\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserSocialByName(\n    $name: String!\n    $userSocial: UserSocialInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: $userSocial }\n    ) {\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserSocialByName(\n    $name: String!\n    $userSocial: UserSocialInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: $userSocial }\n    ) {\n      userSocial {\n        twitterId\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserDiscordByName($name: String!, $discord: DiscordInputType) {\n    updateUserByName(name: $name, userUpdateInput: { discord: $discord }) {\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserDiscordByName($name: String!, $discord: DiscordInputType) {\n    updateUserByName(name: $name, userUpdateInput: { discord: $discord }) {\n      discord {\n        accent_color\n        avatar\n        avatar_decoration\n        banner\n        discriminator\n        flags\n        global_name\n        id\n        locale\n        mfa_enabled\n        premium_type\n        public_flags\n        username\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserTwitterByName($name: String!, $twitterId: String!) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: { twitterId: $twitterId } }\n    ) {\n      userSocial {\n        twitterId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserTwitterByName($name: String!, $twitterId: String!) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: { twitterId: $twitterId } }\n    ) {\n      userSocial {\n        twitterId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserTelegramByName(\n    $name: String!\n    $telegramUser: TelegramUserInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: { telegramUser: $telegramUser } }\n    ) {\n      userSocial {\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserTelegramByName(\n    $name: String!\n    $telegramUser: TelegramUserInputType!\n  ) {\n    updateUserByName(\n      name: $name\n      userUpdateInput: { userSocial: { telegramUser: $telegramUser } }\n    ) {\n      userSocial {\n        telegramUser {\n          authDate\n          firstName\n          hash\n          id\n          photoUrl\n          username\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateKakaoByName($name: String!, $kakaoInfo: KakaoInputType!) {\n    updateKakaoByName(name: $name, kakaoInfo: $kakaoInfo) {\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n        kakao_account {\n          age_range\n          age_range_needs_agreement\n          birthday\n          birthday_needs_agreement\n          birthday_type\n          gender\n          gender_needs_agreement\n          has_age_range\n          has_birthday\n          has_gender\n          profile_image_needs_agreement\n          profile_nickname_needs_agreement\n        }\n      }\n    }\n  }\n  #  mutation UpdateKakaoByName(\n  #    $name: String!\n  #    $authCode: String!\n  #    $redirectUri: String!\n  #  ) {\n  #    updateKakaoByName(\n  #      authCode: $authCode\n  #      name: $name\n  #      redirectUri: $redirectUri\n  #    ) {\n  #      kakao {\n  #        id\n  #        connected_at\n  #        properties {\n  #          nickname\n  #          profile_image\n  #          thumbnail_image\n  #        }\n  #      }\n  #    }\n  #  }\n"): (typeof documents)["\n  mutation UpdateKakaoByName($name: String!, $kakaoInfo: KakaoInputType!) {\n    updateKakaoByName(name: $name, kakaoInfo: $kakaoInfo) {\n      kakao {\n        id\n        connected_at\n        properties {\n          nickname\n          profile_image\n          thumbnail_image\n        }\n        kakao_account {\n          age_range\n          age_range_needs_agreement\n          birthday\n          birthday_needs_agreement\n          birthday_type\n          gender\n          gender_needs_agreement\n          has_age_range\n          has_birthday\n          has_gender\n          profile_image_needs_agreement\n          profile_nickname_needs_agreement\n        }\n      }\n    }\n  }\n  #  mutation UpdateKakaoByName(\n  #    $name: String!\n  #    $authCode: String!\n  #    $redirectUri: String!\n  #  ) {\n  #    updateKakaoByName(\n  #      authCode: $authCode\n  #      name: $name\n  #      redirectUri: $redirectUri\n  #    ) {\n  #      kakao {\n  #        id\n  #        connected_at\n  #        properties {\n  #          nickname\n  #          profile_image\n  #          thumbnail_image\n  #        }\n  #      }\n  #    }\n  #  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteKakaoByName($name: String!) {\n    deleteKakaoByName(name: $name) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteKakaoByName($name: String!) {\n    deleteKakaoByName(name: $name) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteDiscordByName($name: String!) {\n    deleteDiscordByName(name: $name) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteDiscordByName($name: String!) {\n    deleteDiscordByName(name: $name) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Tickets(\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n  ) {\n    tickets(\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n    ) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n"): (typeof documents)["\n  query Tickets(\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n  ) {\n    tickets(\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n    ) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTicketById($id: String!) {\n    ticketById(ticketId: $id) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      participantCount\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n        questGuides {\n          contentFormatType\n          content\n          contentEncodingType\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      rewardClaimedUsers {\n        _id\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      visible\n    }\n  }\n"): (typeof documents)["\n  query GetTicketById($id: String!) {\n    ticketById(ticketId: $id) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      participantCount\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n        questGuides {\n          contentFormatType\n          content\n          contentEncodingType\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      rewardClaimedUsers {\n        _id\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      visible\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Projects($eventTypes: [EventType!]) {\n    projects(eventTypes: $eventTypes) {\n      _id\n      categories\n      description\n      imageUrl\n      name\n      priority\n      projectSocial {\n        discordUrl\n        officialUrl\n        telegramUrl\n        twitterUrl\n        mediumUrl\n        naverBlogUrl\n        kakaoUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query Projects($eventTypes: [EventType!]) {\n    projects(eventTypes: $eventTypes) {\n      _id\n      categories\n      description\n      imageUrl\n      name\n      priority\n      projectSocial {\n        discordUrl\n        officialUrl\n        telegramUrl\n        twitterUrl\n        mediumUrl\n        naverBlogUrl\n        kakaoUrl\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProjectById($projectId: String!) {\n    projectById(projectId: $projectId) {\n      _id\n      categories\n      description\n      imageUrl\n      name\n      priority\n      projectSocial {\n        discordUrl\n        officialUrl\n        telegramUrl\n        twitterUrl\n        mediumUrl\n        naverBlogUrl\n        kakaoUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProjectById($projectId: String!) {\n    projectById(projectId: $projectId) {\n      _id\n      categories\n      description\n      imageUrl\n      name\n      priority\n      projectSocial {\n        discordUrl\n        officialUrl\n        telegramUrl\n        twitterUrl\n        mediumUrl\n        naverBlogUrl\n        kakaoUrl\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TicketsByProjectId(\n    $projectId: String!\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n  ) {\n    ticketsByProjectId(\n      projectId: $projectId\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n    ) {\n      _id\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      participants {\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n"): (typeof documents)["\n  query TicketsByProjectId(\n    $projectId: String!\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n  ) {\n    ticketsByProjectId(\n      projectId: $projectId\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n    ) {\n      _id\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      participants {\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyTwitterLinkingAndRetweetQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterLinkingAndRetweetQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyTwitterLinkingAndRetweetQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterLinkingAndRetweetQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyTwitterLikingQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterLikingQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyTwitterLikingQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterLikingQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyTwitterFollowQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterFollowQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyTwitterFollowQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterFollowQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyTwitterRetweetQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterRetweetQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyTwitterRetweetQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTwitterRetweetQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation Verify3ridgePoint(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verify3ridgePoint(questId: $questId, ticketId: $ticketId, userId: $userId) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation Verify3ridgePoint(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verify3ridgePoint(questId: $questId, ticketId: $ticketId, userId: $userId) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyDiscordQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyDiscordQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyDiscordQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyDiscordQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsCompletedQuestByUserId($questId: String!, $userId: String!) {\n    isCompletedQuestByUserId(questId: $questId, userId: $userId) {\n      isCompleted\n      questId\n    }\n  }\n"): (typeof documents)["\n  query IsCompletedQuestByUserId($questId: String!, $userId: String!) {\n    isCompletedQuestByUserId(questId: $questId, userId: $userId) {\n      isCompleted\n      questId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CompleteQuestOfUser(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    completeQuestOfUser(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n      title\n      title_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      description\n      questPolicy {\n        context\n        questPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CompleteQuestOfUser(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    completeQuestOfUser(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n      title\n      title_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      description\n      questPolicy {\n        context\n        questPolicy\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ClaimReward($ticketId: String!, $userId: String!) {\n    claimReward(ticketId: $ticketId, userId: $userId)\n  }\n"): (typeof documents)["\n  mutation ClaimReward($ticketId: String!, $userId: String!) {\n    claimReward(ticketId: $ticketId, userId: $userId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyAptosQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyAptosQuest(questId: $questId, ticketId: $ticketId, userId: $userId) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyAptosQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyAptosQuest(questId: $questId, ticketId: $ticketId, userId: $userId) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsRegisteredWallet($address: String!, $chain: ChainType!) {\n    isRegisteredWallet(address: $address, chain: $chain)\n  }\n"): (typeof documents)["\n  query IsRegisteredWallet($address: String!, $chain: ChainType!) {\n    isRegisteredWallet(address: $address, chain: $chain)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ClearParticipatedAllEventsByUserId($userId: String!) {\n    clearParticipatedAllEventsByUserId(userId: $userId)\n  }\n"): (typeof documents)["\n  mutation ClearParticipatedAllEventsByUserId($userId: String!) {\n    clearParticipatedAllEventsByUserId(userId: $userId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketVisible($ticketId: String!, $visible: Boolean) {\n    updateTicketById(ticketId: $ticketId, visible: $visible) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketVisible($ticketId: String!, $visible: Boolean) {\n    updateTicketById(ticketId: $ticketId, visible: $visible) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketShortDescription(\n    $ticketId: String!\n    $shortDescription: String\n  ) {\n    updateTicketById(ticketId: $ticketId, shortDescription: $shortDescription) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketShortDescription(\n    $ticketId: String!\n    $shortDescription: String\n  ) {\n    updateTicketById(ticketId: $ticketId, shortDescription: $shortDescription) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketImageUrl($ticketId: String!, $imageUrl: String) {\n    updateTicketById(ticketId: $ticketId, imageUrl: $imageUrl) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketImageUrl($ticketId: String!, $imageUrl: String) {\n    updateTicketById(ticketId: $ticketId, imageUrl: $imageUrl) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketTitle($ticketId: String!, $title: String) {\n    updateTicketById(ticketId: $ticketId, title: $title) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketTitle($ticketId: String!, $title: String) {\n    updateTicketById(ticketId: $ticketId, title: $title) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketProject($ticketId: String!, $project: String) {\n    updateTicketById(ticketId: $ticketId, project: $project) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketProject($ticketId: String!, $project: String) {\n    updateTicketById(ticketId: $ticketId, project: $project) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketDateRangeTime(\n    $ticketId: String!\n    $beginTime: DateTime\n    $untilTime: DateTime\n  ) {\n    updateTicketById(\n      ticketId: $ticketId\n      beginTime: $beginTime\n      untilTime: $untilTime\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketDateRangeTime(\n    $ticketId: String!\n    $beginTime: DateTime\n    $untilTime: DateTime\n  ) {\n    updateTicketById(\n      ticketId: $ticketId\n      beginTime: $beginTime\n      untilTime: $untilTime\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketDescription(\n    $ticketId: String!\n    $description_v2: ContentMetadataInputType\n  ) {\n    updateTicketById(ticketId: $ticketId, description_v2: $description_v2) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketDescription(\n    $ticketId: String!\n    $description_v2: ContentMetadataInputType\n  ) {\n    updateTicketById(ticketId: $ticketId, description_v2: $description_v2) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTicketRewardPolicy(\n    $ticketId: String!\n    $rewardPolicy: RewardPolicyInputType\n  ) {\n    updateTicketById(ticketId: $ticketId, rewardPolicy: $rewardPolicy) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTicketRewardPolicy(\n    $ticketId: String!\n    $rewardPolicy: RewardPolicyInputType\n  ) {\n    updateTicketById(ticketId: $ticketId, rewardPolicy: $rewardPolicy) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateQuest(\n    $ticketId: String!\n    $title_v2: ContentMetadataInputType\n    $description: String\n    $questPolicy: QuestPolicyInputType\n  ) {\n    createQuest(\n      ticketId: $ticketId\n      title_v2: $title_v2\n      description: $description\n      questPolicy: $questPolicy\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateQuest(\n    $ticketId: String!\n    $title_v2: ContentMetadataInputType\n    $description: String\n    $questPolicy: QuestPolicyInputType\n  ) {\n    createQuest(\n      ticketId: $ticketId\n      title_v2: $title_v2\n      description: $description\n      questPolicy: $questPolicy\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteQuest($questId: String!, $ticketId: String!) {\n    deleteQuest(questId: $questId, ticketId: $ticketId)\n  }\n"): (typeof documents)["\n  mutation DeleteQuest($questId: String!, $ticketId: String!) {\n    deleteQuest(questId: $questId, ticketId: $ticketId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateQuest(\n    $description: String!\n    $id: String!\n    $questPolicy: QuestPolicyInputType\n    $title_v2: ContentMetadataInputType\n  ) {\n    updateQuest(\n      description: $description\n      id: $id\n      questPolicy: $questPolicy\n      title_v2: $title_v2\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateQuest(\n    $description: String!\n    $id: String!\n    $questPolicy: QuestPolicyInputType\n    $title_v2: ContentMetadataInputType\n  ) {\n    updateQuest(\n      description: $description\n      id: $id\n      questPolicy: $questPolicy\n      title_v2: $title_v2\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateTicket(\n    $beginTime: DateTime\n    $untilTime: DateTime\n    $title: String\n    $description_v2: ContentMetadataInputType\n    $imageUrl: String\n    $rewardPolicy: RewardPolicyInputType\n  ) {\n    createTicket(\n      beginTime: $beginTime\n      description_v2: $description_v2\n      imageUrl: $imageUrl\n      rewardPolicy: $rewardPolicy\n      title: $title\n      untilTime: $untilTime\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTicket(\n    $beginTime: DateTime\n    $untilTime: DateTime\n    $title: String\n    $description_v2: ContentMetadataInputType\n    $imageUrl: String\n    $rewardPolicy: RewardPolicyInputType\n  ) {\n    createTicket(\n      beginTime: $beginTime\n      description_v2: $description_v2\n      imageUrl: $imageUrl\n      rewardPolicy: $rewardPolicy\n      title: $title\n      untilTime: $untilTime\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteTicket($ticketId: String!) {\n    removeTicketById(ticketId: $ticketId)\n  }\n"): (typeof documents)["\n  mutation DeleteTicket($ticketId: String!) {\n    removeTicketById(ticketId: $ticketId)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifySurveyQuest(\n    $questId: String!\n    $surveyContents: [String!]!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifySurveyQuest(\n      questId: $questId\n      surveyContents: $surveyContents\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifySurveyQuest(\n    $questId: String!\n    $surveyContents: [String!]!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifySurveyQuest(\n      questId: $questId\n      surveyContents: $surveyContents\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyScreenShotQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n    $picUris: [String!]!\n  ) {\n    verifyScreenShotQuest(\n      questId: $questId\n      picUris: $picUris\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyScreenShotQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n    $picUris: [String!]!\n  ) {\n    verifyScreenShotQuest(\n      questId: $questId\n      picUris: $picUris\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveProject($projectId: String!) {\n    removeProject(projectId: $projectId) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveProject($projectId: String!) {\n    removeProject(projectId: $projectId) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProject(\n    $name: String!\n    $categories: [CategoryType!]\n    $priority: Float\n    $description: String\n    $imageUrl: String\n    $projectSocial: ProjectSocialInputType\n  ) {\n    createProject(\n      name: $name\n      categories: $categories\n      priority: $priority\n      description: $description\n      imageUrl: $imageUrl\n      projectSocial: $projectSocial\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProject(\n    $name: String!\n    $categories: [CategoryType!]\n    $priority: Float\n    $description: String\n    $imageUrl: String\n    $projectSocial: ProjectSocialInputType\n  ) {\n    createProject(\n      name: $name\n      categories: $categories\n      priority: $priority\n      description: $description\n      imageUrl: $imageUrl\n      projectSocial: $projectSocial\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateProject(\n    $projectId: String!\n    $description: String\n    $imageUrl: String\n    $name: String\n    $priority: Float\n    $projectSocial: ProjectSocialInputType\n  ) {\n    updateProject(\n      projectId: $projectId\n      description: $description\n      imageUrl: $imageUrl\n      name: $name\n      priority: $priority\n      projectSocial: $projectSocial\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProject(\n    $projectId: String!\n    $description: String\n    $imageUrl: String\n    $name: String\n    $priority: Float\n    $projectSocial: ProjectSocialInputType\n  ) {\n    updateProject(\n      projectId: $projectId\n      description: $description\n      imageUrl: $imageUrl\n      name: $name\n      priority: $priority\n      projectSocial: $projectSocial\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation reorderProject($projectId: String!, $to: Float!) {\n    reorderProject(projectId: $projectId, to: $to)\n  }\n"): (typeof documents)["\n  mutation reorderProject($projectId: String!, $to: Float!) {\n    reorderProject(projectId: $projectId, to: $to)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyOnChainQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyOnChainQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyOnChainQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyOnChainQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyTelegramQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTelegramQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyTelegramQuest(\n    $questId: String!\n    $ticketId: String!\n    $userId: String!\n  ) {\n    verifyTelegramQuest(\n      questId: $questId\n      ticketId: $ticketId\n      userId: $userId\n    ) {\n      _id\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AllTickets(\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n    $limit: Int\n    $skip: Int\n  ) {\n    tickets(\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n      limit: $limit\n      skip: $skip\n    ) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n"): (typeof documents)["\n  query AllTickets(\n    $sort: TicketSortType\n    $status: TicketStatusType\n    $eventTypes: [EventType!]\n    $isVisibleOnly: Boolean\n    $limit: Int\n    $skip: Int\n  ) {\n    tickets(\n      sort: $sort\n      status: $status\n      eventTypes: $eventTypes\n      isVisibleOnly: $isVisibleOnly\n      limit: $limit\n      skip: $skip\n    ) {\n      _id\n      beginTime\n      untilTime\n      completed\n      description\n      description_v2 {\n        contentFormatType\n        contentEncodingType\n        content\n      }\n      shortDescription\n      participants {\n        _id\n        name\n        profileImageUrl\n      }\n      imageUrl\n      quests {\n        _id\n        title\n        title_v2 {\n          contentFormatType\n          contentEncodingType\n          content\n        }\n        description\n        questPolicy {\n          context\n          questPolicy\n        }\n      }\n      project {\n        _id\n        categories\n        description\n        imageUrl\n        name\n        projectSocial {\n          discordUrl\n          officialUrl\n          telegramUrl\n          twitterUrl\n          mediumUrl\n          naverBlogUrl\n          kakaoUrl\n        }\n      }\n      rewardPolicy {\n        context\n        rewardPoint\n        rewardPolicyType\n      }\n      title\n      winners {\n        name\n      }\n      visible\n    }\n  }\n"];

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function gql(source: string): unknown;

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;